#!/bin/bash

## Just writing some simple instructions to connect/disconnect and change audio profiles of Bluetooth devices (input and output), i.e. having capability to play sound and record it. 
## From now on I will be calling it as "dual channel bluetooth device"!!

## Colors !

red="\e[0;91m"
blue="\e[0;94m"
expand_bg="\e[K"
blue_bg="\e[0;104m${expand_bg}"
red_bg="\e[0;101m${expand_bg}"
green_bg="\e[0;102m${expand_bg}"
green="\e[0;92m"
white="\e[0;97m"
bold="\e[1m"
uline="\e[4m"
reset="\e[0m"

## Defining parameters for profiles and smart-switch

USAGE="$(basename "$0") [-h] [-s on/off] [-p music/headset/off] -- Program to manage multiple things related to dual channel bluetooth device under one roof.

where:
    -h : show this help message
    -s : change the state of smartswitch
	-p : change profile"

while getopts p:s:h: input
do
case "${input}"
in
p) profile=${OPTARG};;
s) smartswitch=${OPTARG};;
h) echo "${USAGE}";;
*)  echo
	echo "Invalid option: -$input" ;;
esac
done

## Obtaining the MAC-address and Name for your "dual channel bluetooth device". 
## Executed at the very first time only...

if [ ! -f ".dms" ]; then

	echo ""
	echo -e "${bold}Listing out available bluetooth devices ever connected..${reset}"
	echo ""

    bt-device -l

    echo 
	read -p "$(echo -e "${white}[*]${reset} ${blue}Enter the name of bluetooth device: ${reset}")" device
	echo ----------------------------------------
    read -p "$(echo -e "${white}[*]${reset} ${blue}Enter the MAC-address of bluetooth device: ${reset}")" macid

    echo "#!/bin/bash" > .dms
    echo "export device='$device' " >> .dms
    echo "export macid=$macid" >> .dms
fi

source ./.dms

if [ ! -f ".mac_id" ]; then

	echo "#!/bin/bash" > .mac_id
    echo export mac_id="$macid" | tr : _ >> .mac_id

fi

source ./.mac_id

## Now the real stuff

connection_status=$1

if [ $connection_status == connect ]; then

	echo
	bluetoothctl connect $macid

	echo -e "${blue}----------------------------------------${reset}"

elif [ $connection_status == disconnect ]; then

	echo
	bluetoothctl disconnect $macid

	echo -e "${blue}----------------------------------------${reset}"

fi

## Logic for smart-switch

if [[ $smartswitch == 'off' ]]; then

	echo
	echo -e "${green}[+]${reset} ${bold}Editing the config file for pulseaudio...${reset}"

    echo "#!/usr/bin/pulseaudio -nF
#
# This file is part of PulseAudio.
#
# PulseAudio is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# PulseAudio is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with PulseAudio; if not, see <http://www.gnu.org/licenses/>.
# This startup script is used only if PulseAudio is started per-user
# (i.e. not in system mode)
.fail

### Automatically restore the volume of streams and devices
load-module module-device-restore
load-module module-stream-restore
load-module module-card-restore

### Automatically augment property information from .desktop files
### stored in /usr/share/application
load-module module-augment-properties

### Should be after module-*-restore but before module-*-detect
load-module module-switch-on-port-available

### Load audio drivers statically
### (it's probably better to not load these drivers manually, but instead
### use module-udev-detect -- see below -- for doing this automatically)
#load-module module-alsa-sink
#load-module module-alsa-source device=hw:1,0
#load-module module-oss device="/dev/dsp" sink_name=output source_name=input
#load-module module-oss-mmap device="/dev/dsp" sink_name=output source_name=input
#load-module module-null-sink
#load-module module-pipe-sink

### Automatically load driver modules depending on the hardware available
.ifexists module-udev-detect.so
load-module module-udev-detect
.else
### Use the static hardware detection module (for systems that lack udev support)
load-module module-detect
.endif

### Automatically connect sink and source if JACK server is present
.ifexists module-jackdbus-detect.so
.nofail
load-module module-jackdbus-detect channels=2
.fail
.endif

### Automatically load driver modules for Bluetooth hardware
.ifexists module-bluetooth-policy.so
load-module module-bluetooth-policy auto_switch=false
.endif

.ifexists module-bluetooth-discover.so
load-module module-bluetooth-discover
.endif

### Load several protocols
load-module module-dbus-protocol
.ifexists module-esound-protocol-unix.so
load-module module-esound-protocol-unix
.endif
load-module module-native-protocol-unix

### Network access (may be configured with paprefs, so leave this commented
### here if you plan to use paprefs)
#load-module module-esound-protocol-tcp
#load-module module-native-protocol-tcp
#load-module module-zeroconf-publish

### Load the RTP receiver module (also configured via paprefs, see above)
#load-module module-rtp-recv

### Load the RTP sender module (also configured via paprefs, see above)
#load-module module-null-sink sink_name=rtp format=s16be channels=2 rate=44100 sink_properties="device.description='RTP Multicast Sink'"
#load-module module-rtp-send source=rtp.monitor

### Load additional modules from GSettings. This can be configured with the paprefs tool.
### Please keep in mind that the modules configured by paprefs might conflict with manually
### loaded modules.
.ifexists module-gsettings.so
.nofail
load-module module-gsettings
.fail
.endif


### Automatically restore the default sink/source when changed by the user
### during runtime
### NOTE: This should be loaded as early as possible so that subsequent modules
### that look up the default sink/source get the right value
load-module module-default-device-restore

### Make sure we always have a sink around, even if it is a null sink.
load-module module-always-sink

### Honour intended role device property
load-module module-intended-roles

### Automatically suspend sinks/sources that become idle for too long
load-module module-suspend-on-idle

### If autoexit on idle is enabled we want to make sure we only quit
### when no local session needs us anymore.
.ifexists module-console-kit.so
load-module module-console-kit
.endif
.ifexists module-systemd-login.so
load-module module-systemd-login
.endif

### Enable positioned event sounds
load-module module-position-event-sounds

### Cork music/video streams when a phone stream is active
load-module module-role-cork

### Modules to allow autoloading of filters (such as echo cancellation)
### on demand. module-filter-heuristics tries to determine what filters
### make sense, and module-filter-apply does the heavy-lifting of
### loading modules and rerouting streams.
load-module module-filter-heuristics
load-module module-filter-apply

### Make some devices default
#set-default-sink output
#set-default-source input
load-module module-switch-on-connect" > $HOME/.config/pulse/default.pa 
	
	echo -e "${blue}----------------------------------------${reset}"
	echo -e "${green}[+]${reset} ${bold}Restarting pulse demon...${reset}"
	echo 

	pulseaudio -k
	bluetoothctl connect $macid
	echo -e "${blue}----------------------------------------${reset}"

	sleep 2

elif [[ $smartswitch == 'on' ]]; then 

	echo
	echo -e "${green}[+]${reset} ${bold}Editing the config file for pulseaudio...${reset}"

	echo "#!/usr/bin/pulseaudio -nF
#
# This file is part of PulseAudio.
#
# PulseAudio is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# PulseAudio is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with PulseAudio; if not, see <http://www.gnu.org/licenses/>.
# This startup script is used only if PulseAudio is started per-user
# (i.e. not in system mode)
.fail

### Automatically restore the volume of streams and devices
load-module module-device-restore
load-module module-stream-restore
load-module module-card-restore

### Automatically augment property information from .desktop files
### stored in /usr/share/application
load-module module-augment-properties

### Should be after module-*-restore but before module-*-detect
load-module module-switch-on-port-available

### Load audio drivers statically
### (it's probably better to not load these drivers manually, but instead
### use module-udev-detect -- see below -- for doing this automatically)
#load-module module-alsa-sink
#load-module module-alsa-source device=hw:1,0
#load-module module-oss device="/dev/dsp" sink_name=output source_name=input
#load-module module-oss-mmap device="/dev/dsp" sink_name=output source_name=input
#load-module module-null-sink
#load-module module-pipe-sink

### Automatically load driver modules depending on the hardware available
.ifexists module-udev-detect.so
load-module module-udev-detect
.else
### Use the static hardware detection module (for systems that lack udev support)
load-module module-detect
.endif

### Automatically connect sink and source if JACK server is present
.ifexists module-jackdbus-detect.so
.nofail
load-module module-jackdbus-detect channels=2
.fail
.endif

### Automatically load driver modules for Bluetooth hardware
.ifexists module-bluetooth-policy.so
load-module module-bluetooth-policy auto_switch=2
.endif

.ifexists module-bluetooth-discover.so
load-module module-bluetooth-discover
.endif

### Load several protocols
load-module module-dbus-protocol
.ifexists module-esound-protocol-unix.so
load-module module-esound-protocol-unix
.endif
load-module module-native-protocol-unix

### Network access (may be configured with paprefs, so leave this commented
### here if you plan to use paprefs)
#load-module module-esound-protocol-tcp
#load-module module-native-protocol-tcp
#load-module module-zeroconf-publish

### Load the RTP receiver module (also configured via paprefs, see above)
#load-module module-rtp-recv

### Load the RTP sender module (also configured via paprefs, see above)
#load-module module-null-sink sink_name=rtp format=s16be channels=2 rate=44100 sink_properties="device.description='RTP Multicast Sink'"
#load-module module-rtp-send source=rtp.monitor

### Load additional modules from GSettings. This can be configured with the paprefs tool.
### Please keep in mind that the modules configured by paprefs might conflict with manually
### loaded modules.
.ifexists module-gsettings.so
.nofail
load-module module-gsettings
.fail
.endif


### Automatically restore the default sink/source when changed by the user
### during runtime
### NOTE: This should be loaded as early as possible so that subsequent modules
### that look up the default sink/source get the right value
load-module module-default-device-restore

### Make sure we always have a sink around, even if it is a null sink.
load-module module-always-sink

### Honour intended role device property
load-module module-intended-roles

### Automatically suspend sinks/sources that become idle for too long
load-module module-suspend-on-idle

### If autoexit on idle is enabled we want to make sure we only quit
### when no local session needs us anymore.
.ifexists module-console-kit.so
load-module module-console-kit
.endif
.ifexists module-systemd-login.so
load-module module-systemd-login
.endif

### Enable positioned event sounds
load-module module-position-event-sounds

### Cork music/video streams when a phone stream is active
load-module module-role-cork

### Modules to allow autoloading of filters (such as echo cancellation)
### on demand. module-filter-heuristics tries to determine what filters
### make sense, and module-filter-apply does the heavy-lifting of
### loading modules and rerouting streams.
load-module module-filter-heuristics
load-module module-filter-apply

### Make some devices default
#set-default-sink output
#set-default-source input
load-module module-switch-on-connect" > $HOME/.config/pulse/default.pa 
	
	echo -e "${blue}----------------------------------------${reset}"
	echo -e "${green}[+]${reset} ${bold}Restarting pulse demon...${reset}"
	echo 

	pulseaudio -k
	bluetoothctl connect $macid
	echo -e "${blue}----------------------------------------${reset}"

	sleep 2

else 

	echo
	echo -e "${green}[+]${reset} ${red}${bold}NOT${reset} ${bold}changing the state of smartswitch !! ${reset}"
	echo -e "${blue}----------------------------------------${reset}"

fi

## Logic for profiles

if [[ $profile == 'music' ]]; then

	echo -e "${green}[+]${reset} ${bold}Fetching the index number for $device... !! ${reset}"

	index_string=$(pactl list short cards | grep $mac_id)
	index_no=${index_string:0:1}

	echo -e "${blue}----------------------------------------${reset}"
	echo -e "${green}[+]${reset} ${bold}Fetched the index number as $index_no !! ${reset}"
	echo -e "${blue}----------------------------------------${reset}"

	echo -e "${green}[+]${reset} ${bold}Setting profile suitable for ${green}MUSIC${reset} !! ${reset}"
	echo ""

	pactl set-card-profile $index_no a2dp_sink

elif [[ $profile == 'headset' ]]; then

	echo -e "${green}[+]${reset} ${bold}Fetching the index number for $device... !! ${reset}"

	index_string=$(pactl list short cards | grep $mac_id)
	index_no=${index_string:0:1}

	echo -e "${blue}----------------------------------------${reset}"
	echo -e "${green}[+]${reset} ${bold}Fetched the index number as $index_no !! ${reset}"
	echo -e "${blue}----------------------------------------${reset}"

	echo -e "${green}[+]${reset} ${bold}Setting profile suitable for ${green}SPEAKER+MICROPHONE${reset} !! ${reset}"
	echo ""

	pactl set-card-profile $index_no headset_head_unit

elif [[ $profile == 'off' ]]; then
	
	echo -e "${green}[+]${reset} ${bold}Fetching the index number for $device... !! ${reset}"

	index_string=$(pactl list short cards | grep $mac_id)
	index_no=${index_string:0:1}

	echo -e "${blue}----------------------------------------${reset}"
	echo -e "${green}[+]${reset} ${bold}Fetched the index number as $index_no !! ${reset}"
	echo -e "${blue}----------------------------------------${reset}"

	echo -e "${green}[+]${reset} ${bold}Setting profile to ${green}OFF${reset} !! ${reset}"
	echo ""

	pactl set-card-profile $index_no off

else
    
	echo -e "${green}[+]${reset} ${red}${bold}NOT${reset} ${bold}changing profile !! ${reset}"
	echo ""

fi