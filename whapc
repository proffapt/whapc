#!/bin/bash

## Just writing some simple instructions to connect/disconnect and change audio profiles of Bluetooth devices (input and output), i.e. having capability to play sound and record it. 
## From now on I will be calling it as "dual channel bluetooth device"!!

## Colors !

red="\e[0;91m"
blue="\e[0;94m"
expand_bg="\e[K"
blue_bg="\e[0;104m${expand_bg}"
red_bg="\e[0;101m${expand_bg}"
green_bg="\e[0;102m${expand_bg}"
green="\e[0;92m"
white="\e[0;97m"
bold="\e[1m"
uline="\e[4m"
reset="\e[0m"

## Defining parameters for profiles and smart-switch

USAGE="$(basename "$0") [-h] [-s on/off] [-p music/headset/off] -- Program to manage multiple things related to dual channel bluetooth device under one roof.

where:
    -h : show this help message
    -s : change the state of smartswitch
    -p : change profile"

while getopts p:s:h input
do
case "${input}"
in
p) profile=${OPTARG};;
s) smartswitch=${OPTARG};;
h) echo "${USAGE}" && exit 0 ;;
*)  echo
	echo "Invalid option: -$input" && exit 0 ;;
esac
done

## Obtaining the MAC-address and Name for your "dual channel bluetooth device". 
## Executed at the very first time only...

if [ ! -f ".dms" ]; then

	echo ""
	echo -e "${bold}Listing out available bluetooth devices ever connected..${reset}"
	echo ""

    bt-device -l

    echo 
	read -p "$(echo -e "${white}[*]${reset} ${blue}Enter the name of bluetooth device: ${reset}")" device
	echo ----------------------------------------
    read -p "$(echo -e "${white}[*]${reset} ${blue}Enter the MAC-address of bluetooth device: ${reset}")" macid

    echo "#!/bin/bash" > .dms
    echo "export device='$device' " >> .dms
    echo "export macid=$macid" >> .dms
fi

source ./.dms

if [ ! -f ".mac_id" ]; then

	echo "#!/bin/bash" > .mac_id
    echo export mac_id="$macid" | tr : _ >> .mac_id

fi

source ./.mac_id

## Now the real stuff

connection_status=$1

if [ $connection_status == connect ]; then

	echo
	bluetoothctl connect $macid

	echo -e "${blue}----------------------------------------${reset}"

elif [ $connection_status == disconnect ]; then

	echo
	bluetoothctl disconnect $macid

	echo -e "${blue}----------------------------------------${reset}"

fi

## Logic for smart-switch

if [[ $smartswitch == 'off' ]]; then

	echo

	if [ ! -f "~/.config/pulse/default.pa" ]; then

		echo -e "${green}[+]${reset} ${bold}Copying the dummy config file to it's real location...${reset}"
		cp ./.default_pulse_config.pa ~/.config/pulse/default.pa

	else

		echo -e "${green}[+]${reset} ${bold}Editing the config file for pulseaudio...${reset}"
		sed -i 's/load-module module-bluetooth-policy auto_switch=2/load-module module-bluetooth-policy auto_switch=false/g' ~/.config/pulse/default.pa

	fi

	echo -e "${blue}----------------------------------------${reset}"
	echo -e "${green}[+]${reset} ${bold}Restarting pulse demon...${reset}"
	echo 

	pulseaudio -k
	bluetoothctl connect $macid
	echo -e "${blue}----------------------------------------${reset}"

	sleep 2

elif [[ $smartswitch == 'on' ]]; then 

	echo

	if [ ! -f "~/.config/pulse/default.pa" ]; then

		echo -e "${green}[+]${reset} ${bold}Copying the dummy config file to it's real location...${reset}"
		cp ./.default_pulse_config.pa ~/.config/pulse/default.pa

	else

		echo -e "${green}[+]${reset} ${bold}Editing the config file for pulseaudio...${reset}"
		sed -i 's/load-module module-bluetooth-policy auto_switch=false/load-module module-bluetooth-policy auto_switch=2/g' ~/.config/pulse/default.pa

	fi
	
	echo -e "${blue}----------------------------------------${reset}"
	echo -e "${green}[+]${reset} ${bold}Restarting pulse demon...${reset}"
	echo 

	pulseaudio -k
	bluetoothctl connect $macid
	echo -e "${blue}----------------------------------------${reset}"

	sleep 2

else 

	echo
	echo -e "${green}[+]${reset} ${red}${bold}NOT${reset} ${bold}changing the state of smartswitch !! ${reset}"
	echo -e "${blue}----------------------------------------${reset}"

fi

## Logic for profiles

if [[ $profile == 'music' ]]; then

	echo -e "${green}[+]${reset} ${bold}Fetching the index number for $device... !! ${reset}"

	index_string=$(pactl list short cards | grep $mac_id)
	index_no=${index_string:0:1}

	echo -e "${blue}----------------------------------------${reset}"
	echo -e "${green}[+]${reset} ${bold}Fetched the index number as $index_no !! ${reset}"
	echo -e "${blue}----------------------------------------${reset}"

	echo -e "${green}[+]${reset} ${bold}Setting profile suitable for ${green}MUSIC${reset} !! ${reset}"
	echo ""

	pactl set-card-profile $index_no a2dp_sink

elif [[ $profile == 'headset' ]]; then

	echo -e "${green}[+]${reset} ${bold}Fetching the index number for $device... !! ${reset}"

	index_string=$(pactl list short cards | grep $mac_id)
	index_no=${index_string:0:1}

	echo -e "${blue}----------------------------------------${reset}"
	echo -e "${green}[+]${reset} ${bold}Fetched the index number as $index_no !! ${reset}"
	echo -e "${blue}----------------------------------------${reset}"

	echo -e "${green}[+]${reset} ${bold}Setting profile suitable for ${green}SPEAKER+MICROPHONE${reset} !! ${reset}"
	echo ""

	pactl set-card-profile $index_no headset_head_unit

elif [[ $profile == 'off' ]]; then
	
	echo -e "${green}[+]${reset} ${bold}Fetching the index number for $device... !! ${reset}"

	index_string=$(pactl list short cards | grep $mac_id)
	index_no=${index_string:0:1}

	echo -e "${blue}----------------------------------------${reset}"
	echo -e "${green}[+]${reset} ${bold}Fetched the index number as $index_no !! ${reset}"
	echo -e "${blue}----------------------------------------${reset}"

	echo -e "${green}[+]${reset} ${bold}Setting profile to ${green}OFF${reset} !! ${reset}"
	echo ""

	pactl set-card-profile $index_no off

else
    
	echo -e "${green}[+]${reset} ${red}${bold}NOT${reset} ${bold}changing profile !! ${reset}"
	echo ""

fi